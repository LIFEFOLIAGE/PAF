--------
-- 1 - TABELLE DI DOMINIO
--------



---------------------------- 1 - DOMINI
-- 1- Gruppo enti
--------------


--- elenco di tutti gli enti
CREATE TABLE foliage2.flgente_root_tab (
	id_ente int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	tipo_ente varchar NOT NULL,
	nome_ente varchar NOT NULL,
	data_iniz_vali date NOT NULL DEFAULT '1900-01-01'::date,
	data_fine_vali date NOT NULL DEFAULT '9999-12-31'::date,
	CONSTRAINT flgente_root_ck_tipo CHECK (((tipo_ente)::text = ANY ((ARRAY['REGIONE'::character varying, 'PROVINCIA'::character varying, 'COMUNE'::character varying, 'CASERMA'::character varying, 'PARCO'::character varying])::text[]))),
	CONSTRAINT flgente_root_pk PRIMARY KEY (id_ente),
	CONSTRAINT flgente_root_unq UNIQUE (tipo_ente, nome_ente)
);


-- dominio per gli enti territoriali
CREATE TABLE foliage2.flgente_terr_tab (
	id_ente_terr int4 NOT NULL,
	CONSTRAINT flgente_terr_pk PRIMARY KEY (id_ente_terr),
	CONSTRAINT flgente_terr_fk_ente FOREIGN KEY (id_ente_terr) REFERENCES foliage2.flgente_root_tab(id_ente)
);


-- dominio delle regioni
CREATE TABLE foliage2.flgente_regione_tab (
	id_regione int4 NOT NULL,
	codi_istat varchar NOT NULL,
	CONSTRAINT flgente_regione_pk PRIMARY KEY (id_regione),
	CONSTRAINT flgente_regione_unq_istat UNIQUE (codi_istat),
	CONSTRAINT flgente_regione_fk_ente FOREIGN KEY (id_regione) REFERENCES foliage2.flgente_terr_tab(id_ente_terr)
);

-- dominio per le provincie
CREATE TABLE foliage2.flgente_provincia_tab (
	id_provincia int4 NOT NULL,
	id_regione int4 NOT NULL,
	codi_istat varchar NOT NULL,
	CONSTRAINT flgente_provincia_pk PRIMARY KEY (id_provincia),
	CONSTRAINT flgente_provincia_unq_istat UNIQUE (codi_istat),
	CONSTRAINT flgente_provincia_fk_ente FOREIGN KEY (id_provincia) REFERENCES foliage2.flgente_terr_tab(id_ente_terr),
	CONSTRAINT flgente_provincia_fk_regione FOREIGN KEY (id_regione) REFERENCES foliage2.flgente_regione_tab(id_regione)
);
CREATE INDEX flgente_provincia_idx_regione ON foliage2.flgente_provincia_tab USING btree (id_regione);



-- elenco dei comuni
CREATE TABLE foliage2.flgente_comune_tab (
	id_comune int4 NOT NULL,
	id_provincia int4 NOT NULL,
	codi_istat varchar NOT NULL,
	CONSTRAINT flgente_comune_pk PRIMARY KEY (id_comune),
	CONSTRAINT flgente_comune_unq_istat UNIQUE (codi_istat),
	CONSTRAINT flgente_comune_fk_ente FOREIGN KEY (id_comune) REFERENCES foliage2.flgente_terr_tab(id_ente_terr),
	CONSTRAINT flgente_comune_fk_prov FOREIGN KEY (id_provincia) REFERENCES foliage2.flgente_provincia_tab(id_provincia)
);



-- dominio per le geometrie dei confini degli enti territoriali da gestire
CREATE TABLE foliage2.flglimiti_amministrativi_tab (
	id_ente_terr int4 NOT NULL,
	shape_vinc public.geometry NOT NULL,
	srid int4 NOT NULL,
	shape_envelope_vinc public.geometry NOT NULL,
	CONSTRAINT flglimiti_amministrativi_pk PRIMARY KEY (id_ente_terr),
	CONSTRAINT flglimiti_amministrativi_fk_ente FOREIGN KEY (id_ente_terr) REFERENCES foliage2.flgente_terr_tab(id_ente_terr)
);


----------------------------  1 - DOMINI
-- 2 - Profili utente e autorizzazioni
---------------



-- elenco abilitazioni dei vari profili utente
CREATE TABLE foliage2.flgabilitazioni_tab (
	tipo_auth varchar NOT NULL,
	CONSTRAINT flgabilitazioni_pk PRIMARY KEY (tipo_auth)
);

--- elenco dei profili utente
CREATE TABLE foliage2.flgprof_tab (
	id_profilo int4 NOT NULL,
	descrizione varchar NOT NULL,
	tipo_auth varchar NOT NULL,
	tipo_ambito varchar NOT NULL,
	CONSTRAINT flgprof_ck_tipo_ambito CHECK (((tipo_ambito)::text = ANY ((ARRAY['CASERMA'::character varying, 'PARCO'::character varying, 'TERRITORIALE'::character varying, 'GENERICO'::character varying])::text[]))),
	CONSTRAINT flgprof_ck_tipo_auth CHECK (((tipo_auth)::text = ANY ((ARRAY['PROP'::character varying, 'PROF'::character varying, 'ISTR'::character varying, 'DIRI'::character varying, 'SORV'::character varying, 'RESP'::character varying, 'AMMI'::character varying])::text[]))),
	CONSTRAINT flgprof_tab_pkey PRIMARY KEY (id_profilo),
	CONSTRAINT flgprof_unq_auth_amb UNIQUE (tipo_auth, tipo_ambito)
);
COMMENT ON TABLE foliage2.flgprof_tab IS 'Tabella dei profili';





----------------------------  1 - DOMINI
-- 3 - Configurazione delle istanze - lato BE
--------------

--- elenco delle schede utilizzate da ciascuna tipologia di istanza
CREATE TABLE foliage2.flgschede_tipoistanza_tab (
	id_tipo_istanza int4 NOT NULL,
	prog_scheda int4 NOT NULL,
	cod_scheda varchar NOT NULL,
	is_obbligatoria bool NOT NULL,
	CONSTRAINT flgschede_istanza_pk PRIMARY KEY (id_tipo_istanza, prog_scheda)
);


-- dominio per gli stati di un'istanza
CREATE TABLE foliage2.flgstato_istanza_tab (
	id_stato int4 NOT NULL,
	cod_stato varchar NOT NULL,
	desc_stato varchar NOT NULL,
	CONSTRAINT flgstato_istanza_pk PRIMARY KEY (id_stato),
	CONSTRAINT flgstato_istanza_unq_cod UNIQUE (cod_stato)
);




--- dominio delle tipologie di istanza
CREATE TABLE foliage2.flgcist_tab (
	id_cist int4 NOT NULL,
	desc_cist varchar NULL,
	note varchar NULL,
	desc_regi_ammi varchar(500) NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	nome varchar NOT NULL,
	descrizione_lunga varchar NOT NULL,
	tipo_auth varchar NULL,
	flag_senior bool NOT NULL DEFAULT false,
	cod_tipo_istanza varchar NOT NULL,
	tipo_ente varchar NOT NULL,
	mesi_validita int4 NOT NULL,
	durata_timer_autoaccettazione interval NULL,
	CONSTRAINT flgcist_tab_pkey PRIMARY KEY (id_cist),
	CONSTRAINT flgcist_tab_tipo_ente_check CHECK (((tipo_ente)::text = ANY ((ARRAY['COMUNE'::character varying, 'REGIONE'::character varying, 'PROVINCIA'::character varying])::text[]))),
	CONSTRAINT flgcista_unq_nome UNIQUE (nome),
	CONSTRAINT flgcist_fk_tipo_auth FOREIGN KEY (tipo_auth) REFERENCES foliage2.flgabilitazioni_tab(tipo_auth)
);
COMMENT ON TABLE foliage2.flgcist_tab IS '-- E18 - Categoria Istanze';


-- dominio per le tipologie di istanze specifiche
CREATE TABLE foliage2.flgtipo_istanza_tab (
	id_tipo_istanza int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_cist int4 NOT NULL,
	cod_tipo_istanza_specifico varchar NOT NULL,
	nome_istanza_specifico varchar NOT NULL,
	CONSTRAINT flgtipo_istanza_pk PRIMARY KEY (id_tipo_istanza),
	CONSTRAINT flgtipo_istanza_unq UNIQUE (cod_tipo_istanza_specifico),
	CONSTRAINT flgtipo_istanza_fk_tipo FOREIGN KEY (id_cist) REFERENCES foliage2.flgcist_tab(id_cist)
);
CREATE INDEX flgtipo_istanza_idx_cist ON foliage2.flgtipo_istanza_tab USING btree (id_cist);


-- elenco dei profili abilitati alla creazione delle varie tipologie di istanza
CREATE TABLE foliage2.flgprofili_cist_tab (
	id_profilo int4 NOT NULL,
	id_cist int4 NOT NULL,
	flag_junior_senior int4 NULL,
	CONSTRAINT flgprofili_cist_pk PRIMARY KEY (id_profilo, id_cist),
	CONSTRAINT flgprofili_cist_fk_cist FOREIGN KEY (id_cist) REFERENCES foliage2.flgcist_tab(id_cist),
	CONSTRAINT flgprofili_cist_fk_profilo FOREIGN KEY (id_profilo) REFERENCES foliage2.flgprof_tab(id_profilo)
);




----------------------------  1 - DOMINI
-- 4 - Informazioni delle istanze
---------------

-- tabella con l'elenco degli assortimenti ritraibili
CREATE TABLE foliage2.flgassortimento_tab (
	id_assortimento int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	nome_assortimento varchar NOT NULL,
	destinazione_uso varchar NOT NULL,
	desc_assortimento varchar NOT NULL,
	CONSTRAINT flgassortimento_pk PRIMARY KEY (id_assortimento),
	CONSTRAINT flgassortimento_unq UNIQUE (nome_assortimento)
);


-- dominio per le categorie forestali
CREATE TABLE foliage2.flgcategorie_tab (
	id_categoria int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	nome_categoria varchar NOT NULL,
	cod_categoria int4 NULL,
	CONSTRAINT flgcategorie_pk PRIMARY KEY (id_categoria),
	CONSTRAINT flgcategorie_unq UNIQUE (nome_categoria)
);


-- dominio per le sottocategorie forestali
CREATE TABLE foliage2.flgsottocategorie_tab (
	id_sottocategoria int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_categoria int4 NOT NULL,
	nome_sottocategoria varchar NOT NULL,
	CONSTRAINT flgsottocategorie_pk PRIMARY KEY (id_sottocategoria),
	CONSTRAINT flgsottocategorie_unq UNIQUE (nome_sottocategoria),
	CONSTRAINT flgsottocategorie_fk_cat FOREIGN KEY (id_categoria) REFERENCES foliage2.flgcategorie_tab(id_categoria)
);


-- associazione delle categorie forestali utilizzate dalle regioni
CREATE TABLE foliage2.flgcategorie_regioni_tab (
	id_categoria int4 NOT NULL,
	id_regione int4 NOT NULL,
	CONSTRAINT flgcategorie_regioni_pk PRIMARY KEY (id_categoria, id_regione),
	CONSTRAINT flgcategorie_regioni_fk_categoria FOREIGN KEY (id_categoria) REFERENCES foliage2.flgcategorie_tab(id_categoria),
	CONSTRAINT flgcategorie_regioni_fk_regione FOREIGN KEY (id_regione) REFERENCES foliage2.flgente_regione_tab(id_regione)
);




-- dominio per le forme di governo
CREATE TABLE foliage2.flggove_tab (
	id_gove int4 NOT NULL,
	desc_gove varchar NULL,
	note varchar NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	codi_regi varchar(10) NULL,
	is_fustaia bool NOT NULL,
	is_ceduo bool NOT NULL,
	CONSTRAINT flggove_tab_pkey PRIMARY KEY (id_gove)
);
COMMENT ON TABLE foliage2.flggove_tab IS '-- E6 â€“ Governo';


-- elenco dei raggruppamenti per le tabelle di cubatura
CREATE TABLE foliage2.flggruppi_cubatura_tab (
	id_gruppo_cubatura int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	cod_gruppo_cubatura varchar NOT NULL,
	desc_gruppo_cubatura varchar NOT NULL,
	CONSTRAINT flggruppi_cubatura_pk PRIMARY KEY (id_gruppo_cubatura),
	CONSTRAINT flggruppi_cubatura_unq_cod UNIQUE (cod_gruppo_cubatura)
);

--- dominio per la natura di proprietÃ  di un'istanza
CREATE TABLE foliage2.flgnprp_tab (
	id_nprp int4 NOT NULL,
	desc_nprp varchar NULL,
	note varchar NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	codi_regi varchar(10) NULL,
	CONSTRAINT flgnprp_tab_pkey PRIMARY KEY (id_nprp)
);
COMMENT ON TABLE foliage2.flgnprp_tab IS '-- E10 - Natura proprietÃ ';


-- dominio per la qualificazione titolare di un'istanza
CREATE TABLE foliage2.flgqual_tab (
	id_qual int4 NOT NULL,
	desc_qual varchar NULL,
	codi_qual varchar NULL,
	CONSTRAINT flgqual_tab_pkey PRIMARY KEY (id_qual)
);
COMMENT ON TABLE foliage2.flgqual_tab IS '-- E3 - Qualificazione Titolare';

CREATE SEQUENCE foliage2.flgqual_seq INCREMENT BY 1 START 1 CACHE 1 NO CYCLE;



-- elenco delle limitazioni da gestire nelle istanze
CREATE TABLE foliage2.flglimitazioni_tab (
	id_limitazione int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	cod_limitazione varchar NOT NULL,
	desc_limitazione varchar NULL,
	CONSTRAINT flglimitazioni_pk PRIMARY KEY (id_limitazione),
	CONSTRAINT flglimitazioni_unq_cod UNIQUE (cod_limitazione)
);

-- elenco dei vincoli da gestire nelle istanze
CREATE TABLE foliage2.flgvincoli_tab (
	id_vincolo int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	cod_vincolo varchar NOT NULL,
	desc_vincolo varchar NULL,
	gruppo varchar NULL,
	CONSTRAINT flgvincoli_pk PRIMARY KEY (id_vincolo),
	CONSTRAINT flgvincoli_unq_cod UNIQUE (cod_vincolo)
);



-- dominio dei vincoli associati alle tipologie di istanze ed alle limitazioni che fanno scattare
CREATE TABLE foliage2.flgvincoli_tipo_ista_tab (
	id_vincolo int4 NOT NULL,
	id_tipo_istanza int4 NOT NULL,
	id_limitazione int4 NULL,
	CONSTRAINT flgvincoli_tipo_ista_pk PRIMARY KEY (id_vincolo, id_tipo_istanza),
	CONSTRAINT flgvincoli_tipo_ista_fk_limit FOREIGN KEY (id_limitazione) REFERENCES foliage2.flglimitazioni_tab(id_limitazione),
	CONSTRAINT flgvincoli_tipo_ista_fk_tipo FOREIGN KEY (id_tipo_istanza) REFERENCES foliage2.flgtipo_istanza_tab(id_tipo_istanza),
	CONSTRAINT flgvincoli_tipo_ista_fk_vinc FOREIGN KEY (id_vincolo) REFERENCES foliage2.flgvincoli_tab(id_vincolo)
);
CREATE INDEX flgvincoli_tipo_ista_idx_tipo ON foliage2.flgvincoli_tipo_ista_tab USING btree (id_tipo_istanza);




-- dominio delle schede intervento sotto limitazione vinca per le istanze sotto soglia
CREATE TABLE foliage2.flgschede_intervento_limitazione_vinca_tab (
	id_scheda_intervento int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_tipo_istanza int4 NULL,
	desc_intervento varchar NULL,
	link_pdf_scheda varchar NULL,
	desc_gove varchar NULL,
	CONSTRAINT flgschede_intervento_limitazione_pk PRIMARY KEY (id_scheda_intervento),
	CONSTRAINT flgschede_intervento_limitazione_fk_tipo_ista FOREIGN KEY (id_tipo_istanza) REFERENCES foliage2.flgtipo_istanza_tab(id_tipo_istanza)
);



-- dominio per le forma di trattamento di un intervento
CREATE TABLE foliage2.flgforme_trattamento_tab (
	id_forma_trattamento int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	cod_forma_trattamento varchar NOT NULL,
	desc_forma_trattamento varchar NOT NULL,
	id_gove int4 NOT NULL,
	is_fine_turno bool NOT NULL,
	CONSTRAINT flgforme_trattamento_pk PRIMARY KEY (id_forma_trattamento),
	CONSTRAINT flgforme_trattamento_unq_cod UNIQUE (cod_forma_trattamento),
	CONSTRAINT flgforme_trattamento_fk_gove FOREIGN KEY (id_gove) REFERENCES foliage2.flggove_tab(id_gove)
);


-- associazione delle schede di trattamento alle forme di intervento
CREATE TABLE foliage2.flgforme_trattamento_intervento_tab (
	id_scheda_intervento int4 NOT NULL,
	id_forma_trattamento int4 NOT NULL,
	CONSTRAINT flgforme_trattamento_intervento_pk PRIMARY KEY (id_scheda_intervento, id_forma_trattamento),
	CONSTRAINT flgforme_trattamento_intervento_fk_forma FOREIGN KEY (id_forma_trattamento) REFERENCES foliage2.flgforme_trattamento_tab(id_forma_trattamento),
	CONSTRAINT flgforme_trattamento_intervento_fk_scheda FOREIGN KEY (id_scheda_intervento) REFERENCES foliage2.flgschede_intervento_limitazione_vinca_tab(id_scheda_intervento)
);




-- dominio per le speci forestali
CREATE TABLE foliage2.flgspecie_tab (
	id_specie int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	nome_specie varchar NOT NULL,
	nome_scentifico varchar NOT NULL,
	tipo_soprasuolo varchar NULL,
	CONSTRAINT flgspecie_pk PRIMARY KEY (id_specie),
	CONSTRAINT flgspecie_unq_nome_scentifico UNIQUE (nome_scentifico),
	CONSTRAINT flgspecie_unq_nome_specie UNIQUE (nome_specie)
);


-- dominio per la tipologia di soprasuolo
CREATE TABLE foliage2.flgsspr_tab (
	id_sspr int4 NOT NULL,
	desc_sspr varchar NULL,
	note varchar NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	codi_regi varchar(10) NULL,
	CONSTRAINT flgsspr_tab_pkey PRIMARY KEY (id_sspr)
);
COMMENT ON TABLE foliage2.flgsspr_tab IS '-- E7 - Struttura soprassuolo';


-- dominio per il supporto finanziario di un'istanza
CREATE TABLE foliage2.flgsupporto_finanziario_tab (
	id_tipo_finanziamento int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	cod_tipo_finanziamento int4 NOT NULL,
	desc_tipo_finanziamento varchar NOT NULL,
	CONSTRAINT flgsupporto_finanziario_pk PRIMARY KEY (id_tipo_finanziamento),
	CONSTRAINT flgsupporto_finanziario_unq_cod UNIQUE (cod_tipo_finanziamento)
);

--- dominio per il tipo di azienda di un'istanza
CREATE TABLE foliage2.flgtazi_tab (
	id_tazi int4 NOT NULL,
	desc_tazi varchar NULL,
	note varchar NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	codi_regi varchar(10) NULL,
	CONSTRAINT flgtazi_tab_pkey PRIMARY KEY (id_tazi)
);
COMMENT ON TABLE foliage2.flgtazi_tab IS '-- E11 - Tipo azienda';

-- dominio per la tipologia di viabilitÃ  forestale in un'istanza
create table FLGTIPO_VIABILITA_TAB (
	ID_TIPO_VIABILITA int not null GENERATED ALWAYS AS identity,
	COD_TIPO_VIABILITA varchar not null,
	NOME_TIPO_VIABILITA varchar not null,
	DESC_TIPO_VIABILITA varchar not null,
	constraint FLGTIPO_VIABILITA_PK
		primary key (ID_TIPO_VIABILITA),
	constraint FLGTIPO_VIABILITA_UNQ_COD
		unique (COD_TIPO_VIABILITA)
);



-- dominio per il tipo di proprietÃ  di un'istanza
CREATE TABLE foliage2.flgtprp_tab (
	id_tprp int4 NOT NULL,
	desc_tprp varchar NULL,
	note varchar NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	codi_regi varchar(10) NULL,
	CONSTRAINT flgtprp_tab_pkey PRIMARY KEY (id_tprp)
);
COMMENT ON TABLE foliage2.flgtprp_tab IS '-- E12 - Tipo proprietÃ ';

--- dominio per le tipologie di uso del suolo negli inteventi in ambito non forestale
CREATE TABLE foliage2.flguso_suolo_tab (
	id_uso_suolo int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	cod_uso_suolo varchar NOT NULL,
	desc_uso_suolo varchar NOT NULL,
	CONSTRAINT flguso_suolo_pk PRIMARY KEY (id_uso_suolo),
	CONSTRAINT flguso_suolo_unq_cod UNIQUE (cod_uso_suolo)
);


-- dominio per le tipologie di intervento in ambito non forestale
CREATE TABLE foliage2.flgtipo_intervento_tab (
	id_tipo_intervento int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_uso_suolo int4 NOT NULL,
	cod_tipo_intervento varchar NOT NULL,
	nome_tipo_intervento varchar NOT NULL,
	riferimento_normativo varchar NOT NULL,
	parametro_richiesto varchar NOT NULL,
	CONSTRAINT flgflgtipo_intervento_unq_cod UNIQUE (id_uso_suolo, cod_tipo_intervento),
	CONSTRAINT flgtipo_intervento_pk PRIMARY KEY (id_tipo_intervento),
	CONSTRAINT flgflgtipo_intervento_fk_uso FOREIGN KEY (id_uso_suolo) REFERENCES foliage2.flguso_suolo_tab(id_uso_suolo)
);





--- elenco delle tipologie di rilievi in campo
CREATE TABLE foliage2.flgclay_tab (
	id_clay int4 NOT NULL,
	desc_clay varchar NULL,
	note varchar NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	CONSTRAINT flgclay_tab_pkey PRIMARY KEY (id_clay)
);



----------------------------  1 - DOMINI
-- 5 - Schedulazioni batch e reportistica
---------------

--- elenco dei batch
CREATE TABLE foliage2.flgconf_batch_tab (
	id_batch int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	cod_batch varchar NOT NULL,
	desc_batch varchar NULL,
	--data_partenza timestamp NULL,
	--intervallo_frequenza interval NOT NULL,
	--intervallo_offset interval NULL,
	--has_recupero_esecuzioni_mancanti bool NOT NULL,
	CONSTRAINT flgconf_batch_pk PRIMARY KEY (id_batch),
	CONSTRAINT flgconf_batch_unq UNIQUE (cod_batch)
);

-- configurazione della schedulazione periodica dei batch
create table foliage2.flgbatch_scheduling_tab (
	id_batch int not null,
	data_partenza timestamp without time zone,
	intervallo_frequenza interval not null,
	intervallo_offset interval,
	has_recupero_esecuzioni_mancanti boolean not null,
	constraint flgbatch_scheduling_pk
		primary key (id_batch),
	constraint flgbatch_scheduling_fk_batch
		foreign key (id_batch)
		references foliage2.flgconf_batch_tab
);

-- dominio delle tipologie di report
CREATE TABLE foliage2.flgconf_batch_report_tab (
	id_report int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_batch int4 NOT NULL,
	desc_report varchar NOT NULL,
	cod_report varchar NOT NULL,
	report_name varchar NOT NULL,
	formato_files _varchar NOT NULL,
	formato_data_desc varchar NOT NULL,
	formato_data_file varchar NOT NULL,
	CONSTRAINT flgconf_batch_report_pk PRIMARY KEY (id_report),
	CONSTRAINT flgconf_batch_report_unq UNIQUE (cod_report),
	CONSTRAINT flgconf_batch_report_fk_batch FOREIGN KEY (id_batch) REFERENCES foliage2.flgconf_batch_tab(id_batch)
);


---- elenco dei profili abilitati a visualizzare le tipologie di report
CREATE TABLE foliage2.flgprofili_report_tab (
	id_report int4 NOT NULL,
	id_profilo int4 NOT NULL,
	CONSTRAINT flgprofili_report_pk PRIMARY KEY (id_report, id_profilo)
);



--------
-- 2 - TABELLE DATI
--------


--------------------- 2 - DATI
-- 1 File allegati
---------------

-- tabella master dei file
CREATE TABLE foliage2.flgbase64_formio_file_master_tab (
	id_file int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	data_caricamento timestamp NOT NULL,
	CONSTRAINT flgbase64_formio_file_master_pk PRIMARY KEY (id_file)
);

-- elenco degli file allegati
CREATE TABLE foliage2.flgbase64_formio_file_tab (
	id_file int4 NOT NULL,
	prog_file int4 NOT NULL,
	file_name varchar NOT NULL,
	original_file_name varchar NOT NULL,
	file_size int4 NOT NULL,
	"storage" varchar NOT NULL,
	file_type varchar NOT NULL,
	hash_file varchar NOT NULL,
	file_data bytea NULL,
	CONSTRAINT flgbase64_formio_file_pk PRIMARY KEY (id_file, prog_file),
	CONSTRAINT flgbase64_formio_file_fk_master FOREIGN KEY (id_file) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file) ON DELETE CASCADE
);



--------------------- 2 - DATI
-- 2 Utenze
---------------


-- tabella degli utenti
CREATE TABLE foliage2.flguten_tab (
	id_uten int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 100 CACHE 1 NO CYCLE),
	nome varchar(100) NULL,
	cognome varchar(100) NULL,
	codi_fisc varchar(100) NULL,
	user_name varchar(500) NOT NULL,
	stato int2 NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins timestamp NULL,
	user_upd varchar NULL,
	data_upd timestamp NULL,
	data_ini_vali timestamp NULL,
	data_fine_vali timestamp NULL,
	flag_accettazione bool NOT NULL DEFAULT false,
	data_nascita date NULL,
	luogo_nascita varchar NULL,
	sesso varchar NULL,
	indirizzo varchar NULL,
	citta varchar NULL,
	cap varchar NULL,
	telefono varchar NULL,
	email varchar NULL,
	flag_attivo int2 NULL,
	pec varchar NULL,
	id_comune int4 NULL,
	num_civico varchar NULL,
	CONSTRAINT flguten_tab_pck PRIMARY KEY (id_uten),
	CONSTRAINT flguten_tab_un UNIQUE (user_name),
	CONSTRAINT flguten_fk_comune FOREIGN KEY (id_comune) REFERENCES foliage2.flgente_comune_tab(id_comune)
);
COMMENT ON TABLE foliage2.flguten_tab IS '-- E27 â€“ Utente';


-- profili associati a ciascun utente
CREATE TABLE foliage2.flgprofili_utente_tab (
	id_utente int4 NOT NULL,
	id_profilo int4 NOT NULL,
	flag_default bool NULL,
	flag_senior bool NOT NULL DEFAULT false,
	CONSTRAINT flgprofili_utente_ck_def CHECK (((flag_default IS NULL) OR (flag_default = true))),
	CONSTRAINT flgprofili_utente_pk PRIMARY KEY (id_utente, id_profilo),
	CONSTRAINT flgprofili_utente_unq_def UNIQUE (id_utente, flag_default),
	CONSTRAINT flgprofili_utente_fk_profilo FOREIGN KEY (id_profilo) REFERENCES foliage2.flgprof_tab(id_profilo),
	CONSTRAINT flgprofili_utente_fk_utente FOREIGN KEY (id_utente) REFERENCES foliage2.flguten_tab(id_uten)
);



-- richieste dei profili effettuate dagli utenti
CREATE TABLE foliage2.flgrichieste_profili_tab (
	id_richiesta int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_utente int4 NOT NULL,
	id_profilo_richiesto int4 NOT NULL,
	id_ente int4 NOT NULL,
	data_richiesta timestamp NOT NULL,
	esito_approvazione bool NULL,
	id_utente_approvazione int4 NULL,
	id_utente_revoca int4 NULL,
	data_annullamento timestamp NULL,
	data_approvazione timestamp NULL,
	data_revoca timestamp NULL,
	note_richiesta varchar NULL,
	note_approvazione varchar NULL,
	note_revoca varchar NULL,
	flag_richiesta_valida bool NULL GENERATED ALWAYS AS (
		CASE
			WHEN data_annullamento IS NULL AND data_revoca IS NULL AND (esito_approvazione IS NULL OR esito_approvazione) THEN true
			ELSE NULL::boolean
		END
	) STORED,
	CONSTRAINT flgrichieste_profili_ck_revoca CHECK (((data_revoca IS NULL) OR (data_approvazione < data_revoca))),
	CONSTRAINT flgrichieste_profili_pk PRIMARY KEY (id_richiesta),
	CONSTRAINT flgrichieste_profili_unq_ric UNIQUE (id_utente, id_profilo_richiesto, id_ente, flag_richiesta_valida),
	CONSTRAINT flgrichieste_profili_fk_ente FOREIGN KEY (id_ente) REFERENCES foliage2.flgente_root_tab(id_ente),
	CONSTRAINT flgrichieste_profili_fk_prof FOREIGN KEY (id_profilo_richiesto) REFERENCES foliage2.flgprof_tab(id_profilo),
	CONSTRAINT flgrichieste_profili_fk_ute FOREIGN KEY (id_utente) REFERENCES foliage2.flguten_tab(id_uten),
	CONSTRAINT flgrichieste_profili_fk_ute_approv FOREIGN KEY (id_utente_approvazione) REFERENCES foliage2.flguten_tab(id_uten)
);
CREATE INDEX flgrichieste_profili_idx_ente ON foliage2.flgrichieste_profili_tab USING btree (id_ente);
CREATE INDEX flgrichieste_profili_idx_prof ON foliage2.flgrichieste_profili_tab USING btree (id_profilo_richiesto);
CREATE INDEX flgrichieste_profili_idx_ute ON foliage2.flgrichieste_profili_tab USING btree (id_utente);
CREATE INDEX flgrichieste_profili_idx_ute_appr ON foliage2.flgrichieste_profili_tab USING btree (id_utente_approvazione);


-- enti ablitati agli autenti per ciascun profilo che li richiede
CREATE TABLE foliage2.flgenti_profilo_tab (
	id_utente int4 NOT NULL,
	id_profilo int4 NOT NULL,
	id_ente int4 NOT NULL,
	flag_richiesta_valida bool NULL GENERATED ALWAYS AS (true) STORED,
	CONSTRAINT flgenti_profilo_pk PRIMARY KEY (id_utente, id_profilo, id_ente),
	CONSTRAINT flgenti_profilo_fk_rich_val FOREIGN KEY (id_utente,id_profilo,id_ente,flag_richiesta_valida) REFERENCES foliage2.flgrichieste_profili_tab(id_utente,id_profilo_richiesto,id_ente,flag_richiesta_valida)
);
CREATE INDEX flgenti_profilo_idx_ente ON foliage2.flgenti_profilo_tab USING btree (id_ente);




-- dati delle autocertificazioni dei professionisti
CREATE TABLE foliage2.flgautocert_prof_tab (
	id_utente int4 NOT NULL,
	categoria varchar NOT NULL,
	sottocategoria varchar NULL,
	colleggio varchar NULL,
	numero_iscrizione varchar NULL,
	id_provincia_iscrizione int4 NULL,
	data_inserimento timestamp NOT NULL,
	data_annullamento timestamp NULL,
	pec varchar not null,
	flag_valido bool NULL GENERATED ALWAYS AS (
CASE
    WHEN data_annullamento IS NULL THEN true
    ELSE NULL::boolean
END) STORED,
	CONSTRAINT flgautocert_prof_ck_sottoc_coll CHECK (((((categoria)::text = 'ordineProfessionale'::text) AND ((sottocategoria)::text = ANY ((ARRAY['junior'::character varying, 'senior'::character varying])::text[]))) OR (((categoria)::text = 'collegio'::text) AND ((colleggio)::text = ANY ((ARRAY['laureati'::character varying, 'nonLaureati'::character varying])::text[]))))),
	CONSTRAINT flgautocert_prof_unq_val UNIQUE (id_utente, flag_valido),
	CONSTRAINT flgautocert_prof_fk_prov FOREIGN KEY (id_provincia_iscrizione) REFERENCES foliage2.flgente_provincia_tab(id_provincia),
	CONSTRAINT flgautocert_prof_fk_ute FOREIGN KEY (id_utente) REFERENCES foliage2.flguten_tab(id_uten)
);
CREATE INDEX flgautocert_prof_idx_prov ON foliage2.flgautocert_prof_tab USING btree (id_provincia_iscrizione);
CREATE INDEX flgautocert_prof_idx_ute ON foliage2.flgautocert_prof_tab USING btree (id_utente);


-- elenco degli utenti attualmente registrati come professionisti
CREATE TABLE foliage2.flgute_professionisti_tab (
	id_utente int4 NOT NULL,
	id_profilo int4 NOT NULL,
	is_senior bool NOT NULL,
	CONSTRAINT flgute_professionisti_ck_profilo CHECK ((id_profilo = 2)),
	CONSTRAINT flgute_professionisti_pk PRIMARY KEY (id_utente, id_profilo),
	CONSTRAINT flgute_professionisti_fk_ute_prof FOREIGN KEY (id_utente,id_profilo) REFERENCES foliage2.flgprofili_utente_tab(id_utente,id_profilo)
);





-- dati aggiuntivi delle richieste con profilo di responsabile effettuate dagli utenti
CREATE TABLE foliage2.flgrichieste_responsabile_tab (
	id_richiesta int4 NOT NULL,
	tipo_nomina varchar NOT NULL,
	numero_protocollo varchar NOT NULL,
	data_protocollo date NOT NULL,
	id_file_atto_nomina int4 NOT NULL,
	id_file_doc_identita int4 NOT NULL,
	CONSTRAINT flgrichieste_responsabile_pk PRIMARY KEY (id_richiesta),
	CONSTRAINT flgrichieste_responsabile_fk_atto FOREIGN KEY (id_file_atto_nomina) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file),
	CONSTRAINT flgrichieste_responsabile_fk_doc FOREIGN KEY (id_file_doc_identita) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file),
	CONSTRAINT flgrichieste_responsabile_fk_rich FOREIGN KEY (id_richiesta) REFERENCES foliage2.flgrichieste_profili_tab(id_richiesta)
);



-- notifiche per gli utenti
CREATE TABLE foliage2.flgnotifiche_tab (
	id_notifica int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_utente int4 NOT NULL,
	testo varchar NOT NULL,
	link varchar NOT NULL,
	data_notifica timestamp NOT NULL,
	data_lettura timestamp NULL,
	flag_letta bool NULL GENERATED ALWAYS AS (data_lettura IS NOT NULL) STORED,
	CONSTRAINT flgnotifiche_pk PRIMARY KEY (id_notifica)
);
CREATE INDEX flgnotifiche_idx_ord ON foliage2.flgnotifiche_tab USING btree (id_utente, flag_letta DESC, data_notifica);


create table foliage2.flgutenti_white_list_tab (
	user_name varchar not null,
	data_ins timestamp without time zone default localtimestamp,
	constraint flgutenti_white_list_pk
		primary key(user_name)
);

create table foliage2.flgutenti_black_list_tab (
	user_name varchar not null,
	data_ins timestamp without time zone default localtimestamp,
	constraint flgutenti_black_list_pk
		primary key(user_name)
);


create table foliage2.flgserver_requests_tab (
	thread_name varchar not null,
	ip_addres varchar not null,
	hostname varchar not null,
	username varchar,
	http_method varchar not null,
	requested_path varchar not null,
	request_query varchar,
	ora_inizio timestamp without time zone not null,
	durata interval,
	http_status_code int not null,
	errore varchar
);

--------------------- 2 - DATI
-- 3 Istanze
---------------


-- tabella con i numeri progressivi da genereare alla creazione di una nuova istanza per ogni annualitÃ 
CREATE TABLE foliage2.flgista_progressivi_tab (
	anno int4 NOT NULL,
	prog_successivo int4 NOT NULL,
	CONSTRAINT flgista_progressivi_pk PRIMARY KEY (anno)
);


--- dati del titolare di un'istanza
CREATE TABLE foliage2.flgtitolare_istanza_tab (
	id_titolare int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	codice_fiscale varchar NOT NULL,
	cognome varchar NOT NULL,
	nome varchar NOT NULL,
	data_nascita date NOT NULL,
	luogo_nascita varchar NOT NULL,
	email varchar,
	pec varchar,
	id_file_delega int4 NULL,
	id_comune int4 NULL,
	cap varchar NULL,
	indirizzo varchar NULL,
	num_civico varchar not NULL,
	telefono varchar,
	genere varchar not NULL,
	CONSTRAINT flgtitolare_istanza_pk PRIMARY KEY (id_titolare),
	CONSTRAINT flgtitolare_istanza_fk_file_delega FOREIGN KEY (id_file_delega) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file)
);
CREATE INDEX flgtitolare_istanza_idx_codi_fisc ON foliage2.flgtitolare_istanza_tab USING btree (codice_fiscale);

CREATE SEQUENCE foliage2.flgista_seq INCREMENT BY 1 START 1 CACHE 1 NO CYCLE;
--- registro delle istanze
CREATE TABLE foliage2.flgista_tab (
	id_ista int4 NOT NULL,
	codi_ista varchar(100) NULL,
	codi_regi varchar(10) NULL,
	data_istanza date NOT NULL DEFAULT CURRENT_DATE,
	stato int2 NOT NULL,
	desc_ista varchar(500) NULL,
	note varchar NULL,
	id_nprp int4 NULL,
	id_tazi int4 NULL,
	id_tprp int4 NULL,
	id_qual int4 NULL,
	flag_medio_piccola int2 NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NOT NULL,
	data_fine_vali date NULL,
	fase int2 NULL,
	mesi_cantiere int2 NULL,
	nome_ista varchar(100) NULL,
	id_utente_compilazione int4 NULL,
	id_ente_terr int4 NULL,
	id_titolare int4 NULL,
	id_tipo_istanza int4 NOT NULL,
	id_scheda_intervento int4 NULL,
	has_visione_vincoli bool NULL,
	CONSTRAINT flgista_tab_pck PRIMARY KEY (id_ista)
);
CREATE INDEX flgista_idx_tito ON foliage2.flgista_tab USING btree (id_titolare);
COMMENT ON TABLE foliage2.flgista_tab IS '-- E19 â€“ Istanza';

ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_fk FOREIGN KEY (id_titolare) REFERENCES foliage2.flgtitolare_istanza_tab(id_titolare);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_fk_ente_terr FOREIGN KEY (id_ente_terr) REFERENCES foliage2.flgente_terr_tab(id_ente_terr);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_fk_scheda_inte FOREIGN KEY (id_scheda_intervento) REFERENCES foliage2.flgschede_intervento_limitazione_vinca_tab(id_scheda_intervento);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_fk_stato FOREIGN KEY (stato) REFERENCES foliage2.flgstato_istanza_tab(id_stato);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_fk_tipo FOREIGN KEY (id_tipo_istanza) REFERENCES foliage2.flgtipo_istanza_tab(id_tipo_istanza);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_fk_user_compilazione FOREIGN KEY (id_utente_compilazione) REFERENCES foliage2.flguten_tab(id_uten);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_nprp_tab_fk3 FOREIGN KEY (id_nprp) REFERENCES foliage2.flgnprp_tab(id_nprp);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_qual_tab_fk6 FOREIGN KEY (id_qual) REFERENCES foliage2.flgqual_tab(id_qual);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_tazi_tab_fk4 FOREIGN KEY (id_tazi) REFERENCES foliage2.flgtazi_tab(id_tazi);
ALTER TABLE foliage2.flgista_tab ADD CONSTRAINT flgista_tprp_tab_fk5 FOREIGN KEY (id_tprp) REFERENCES foliage2.flgtprp_tab(id_tprp);



-- elenco delle schede salvate per ogni istanza
CREATE TABLE foliage2.flgista_schede_salvate_tab (
	id_ista int4 NOT NULL,
	prog_scheda int4 NOT NULL,
	data_ultimo_salvataggio timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	id_utente_salvataggio int4 NOT NULL,
	CONSTRAINT flgista_schede_salvate_pk PRIMARY KEY (id_ista, prog_scheda)
);


--- registro delle tavole caricate per le istanze
CREATE TABLE foliage2.flgtavole_istanza_tab (
	id_tavola_ista int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_ista int4 NOT NULL,
	prog_tavola int4 NOT NULL,
	id_file_tavola int4 NOT NULL,
	id_utente int4 NOT NULL,
	data_caricamento timestamp NOT NULL,
	CONSTRAINT flgtavole_istanza_pk PRIMARY KEY (id_tavola_ista),
	CONSTRAINT flgtavole_istanza_unq UNIQUE (id_ista, prog_tavola),
	CONSTRAINT flgtavole_istanza_fk_file FOREIGN KEY (id_file_tavola) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file)
);



-- file della scheda tipo gestione di un'istanza
CREATE TABLE foliage2.flgfiletipo_gestione_tab (
	id_ista int4 NOT NULL,
	id_file_autocertificazione_proprieta int4 NOT NULL,
	id_file_delega_titolarita int4 NULL,
	id_file_atto_nomina_rappresentante_legale int4 NULL,
	id_file_delega_presentazione int4 NULL,
	id_file_provvedimento_boschi_silenti int4 NULL,
	id_file_autocertificazione_ditta_forestale int4 NULL,
	id_file_documenti_identita int4 NULL,
	CONSTRAINT flgfiletipo_gestione_pk PRIMARY KEY (id_ista)
);

ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_atto_nomina_rappresentante_legale FOREIGN KEY (id_file_atto_nomina_rappresentante_legale) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_autocert FOREIGN KEY (id_file_autocertificazione_proprieta) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_autocertificazione_ditta_forestale FOREIGN KEY (id_file_autocertificazione_ditta_forestale) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_delega FOREIGN KEY (id_file_delega_titolarita) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_delega_presentazione FOREIGN KEY (id_file_delega_presentazione) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_documenti_identita FOREIGN KEY (id_file_documenti_identita) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);
ALTER TABLE foliage2.flgfiletipo_gestione_tab ADD CONSTRAINT flgfiletipo_gestione_fk_provvedimento_boschi_silenti FOREIGN KEY (id_file_provvedimento_boschi_silenti) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);

-- particelle catastali dichiarate per un'istanza
CREATE TABLE foliage2.flgpart_catastali_tab (
	id_part_cata int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_ista int4 NOT NULL,
	id_comune int4 NOT NULL,
	sezione varchar NOT NULL,
	foglio int4 NOT NULL,
	particella varchar NOT NULL,
	sub varchar NOT NULL,
	superficie int4 NOT NULL,
	superficie_intervento int4 NULL DEFAULT 0,
	CONSTRAINT flgpart_catastali_pk PRIMARY KEY (id_part_cata),
	CONSTRAINT flgpart_catastali_tab_superficie_check CHECK ((superficie >= 0)),
	CONSTRAINT flgpart_catastali_unq_part UNIQUE (id_ista, id_comune, sezione, foglio, particella, sub)
);
CREATE INDEX flgpart_catastali_idx_comune ON foliage2.flgpart_catastali_tab USING btree (id_comune);
CREATE INDEX flgpart_catastali_idx_ista ON foliage2.flgpart_catastali_tab USING btree (id_ista);

ALTER TABLE foliage2.flgpart_catastali_tab ADD CONSTRAINT flgpart_catastali_fk_comune FOREIGN KEY (id_comune) REFERENCES foliage2.flgente_comune_tab(id_comune);
ALTER TABLE foliage2.flgpart_catastali_tab ADD CONSTRAINT flgpart_catastali_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;

-- particella forestale di un'istanza
CREATE TABLE foliage2.flgparticella_forestale_shape_tab (
	id_ista int4 NOT NULL,
	prog_geom int4 NOT NULL,
	superficie float4 NULL,
	shape public.geometry NOT NULL,
	CONSTRAINT flgparticella_forestale_shape_pk PRIMARY KEY (id_ista, prog_geom)
);
ALTER TABLE foliage2.flgparticella_forestale_shape_tab ADD CONSTRAINT flgparticella_forestale_shape_fk_pfor FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);

-- dati della stazione forestale di un'istanza
CREATE TABLE foliage2.flgparticella_forestale_tab (
	id_ista int4 NOT NULL,
	altimetria_min float4 NULL,
	altimetria_max float4 NULL,
	altimetria_avg float4 NULL,
	pendenza_min float4 NULL,
	pendenza_max float4 NULL,
	pendenza_avg float4 NULL,
	superficie_pfor float4 NULL,
	slope_raster public.raster NULL,
	dem_raster public.raster NULL,
	CONSTRAINT flgparticella_forestale_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgparticella_forestale_tab ADD CONSTRAINT flgparticella_forestale_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);

--- registro dei vincoli rilevati in un'istanza
CREATE TABLE foliage2.flgvincoli_ista_tab (
	id_vincolo int4 NOT NULL,
	id_ista int4 NOT NULL,
	prog int4 NOT NULL,
	cod_area varchar NULL,
	nome_area varchar NULL,
	shape public.geometry NULL,
	superficie numeric NULL,
	CONSTRAINT flgvincoli_ista_pk PRIMARY KEY (id_vincolo, id_ista, prog),
	CONSTRAINT flgvincoli_ista_tab_superficie_check CHECK ((superficie >= (0)::numeric))
);
ALTER TABLE foliage2.flgvincoli_ista_tab ADD CONSTRAINT flgvincoli_ista_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);
ALTER TABLE foliage2.flgvincoli_ista_tab ADD CONSTRAINT flgvincoli_ista_fk_vinc FOREIGN KEY (id_vincolo) REFERENCES foliage2.flgvincoli_tab(id_vincolo);



-- registro delle risposte al wizard sulla vincolistica di un'istanza
CREATE TABLE foliage2.flgrisposte_wizard_vincolistica_tab (
	id_ista int4 NOT NULL,
	prog int4 NOT NULL,
	risposta varchar NOT NULL,
	CONSTRAINT flgrisposte_wizard_vincolistica_pk PRIMARY KEY (id_ista, prog)
);
ALTER TABLE foliage2.flgrisposte_wizard_vincolistica_tab ADD CONSTRAINT flgrisposte_wizard_vincolistica_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;


-- file allegato vinca di un'istanza
CREATE TABLE foliage2.flgista_elaborato_vinca_tab (
	id_ista int4 NOT NULL,
	id_file_vinca int4 NOT NULL,
	CONSTRAINT flgista_elaborato_vinca_pk PRIMARY KEY (id_ista)
);
CREATE INDEX flgista_elaborato_vinca_idx_file ON foliage2.flgista_elaborato_vinca_tab USING btree (id_file_vinca);

ALTER TABLE foliage2.flgista_elaborato_vinca_tab ADD CONSTRAINT flgista_elaborato_vinca_fk_file FOREIGN KEY (id_file_vinca) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgista_elaborato_vinca_tab ADD CONSTRAINT flgista_elaborato_vinca_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;






-- registro delle unitÃ  omoegenee di un'istanza
CREATE TABLE foliage2.flgunita_omogenee_tab (
	id_ista int4 NOT NULL,
	prog_uog int4 NOT NULL,
	nome_uog varchar NOT NULL,
	superficie_utile numeric NOT NULL,
	superficie_aree_improduttive numeric NOT NULL,
	superficie_chiare_radure numeric NOT NULL,
	superficie_aree_interdette numeric NOT NULL,
	superficie numeric NOT NULL,
	desc_gove varchar NULL,
	id_sspr int4 NULL,
	eta_media int4 NULL,
	tipo_soprasuolo varchar NULL,
	shape public.geometry NULL,
	id_categoria int4 NOT NULL,
	id_sottocategoria int4 NULL,
	CONSTRAINT flgunita_omogenee_pk PRIMARY KEY (id_ista, prog_uog),
	CONSTRAINT flgunita_omogenee_tab_eta_media_check CHECK ((eta_media >= 0)),
	CONSTRAINT flgunita_omogenee_tab_superficie_aree_improduttive_check CHECK ((superficie_aree_improduttive >= (0)::numeric)),
	CONSTRAINT flgunita_omogenee_tab_superficie_aree_interdette_check CHECK ((superficie_aree_interdette >= (0)::numeric)),
	CONSTRAINT flgunita_omogenee_tab_superficie_check CHECK ((superficie >= (0)::numeric)),
	CONSTRAINT flgunita_omogenee_tab_superficie_chiare_radure_check CHECK ((superficie_chiare_radure >= (0)::numeric)),
	CONSTRAINT flgunita_omogenee_tab_superficie_utile_check CHECK ((superficie_utile >= (0)::numeric)),
	CONSTRAINT flgunita_omogenee_unq_nome UNIQUE (id_ista, nome_uog)
);
ALTER TABLE foliage2.flgunita_omogenee_tab ADD CONSTRAINT flgunita_omogenee_fk_categoria FOREIGN KEY (id_categoria) REFERENCES foliage2.flgcategorie_tab(id_categoria);
ALTER TABLE foliage2.flgunita_omogenee_tab ADD CONSTRAINT flgunita_omogenee_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;
ALTER TABLE foliage2.flgunita_omogenee_tab ADD CONSTRAINT flgunita_omogenee_fk_sottocategoria FOREIGN KEY (id_sottocategoria) REFERENCES foliage2.flgsottocategorie_tab(id_sottocategoria);



-- forma di trattamento indicata per un'unitÃ  omogenea
CREATE TABLE foliage2.flgunita_omogenee_trattamento_tab (
	id_ista int4 NOT NULL,
	prog_uog int4 NOT NULL,
	id_gove int4 NOT NULL,
	id_forma_trattamento_prec int4 NOT NULL,
	id_forma_trattamento int4 NOT NULL,
	CONSTRAINT flgunita_omogenee_trattamento_pk PRIMARY KEY (id_ista, prog_uog, id_gove)
);
ALTER TABLE foliage2.flgunita_omogenee_trattamento_tab ADD CONSTRAINT flgunita_omogenee_trattamento_fk_ista FOREIGN KEY (id_ista,prog_uog) REFERENCES foliage2.flgunita_omogenee_tab(id_ista,prog_uog) ON DELETE CASCADE;

-- registro della viabilitÃ  forestale di un'istanza
CREATE TABLE foliage2.flgviabilita_ista_tab (
	id_ista int4 NOT NULL,
	prog_viabilita int4 NOT NULL,
	cod_tipo_viabilita varchar NOT NULL,
	shape public.geometry NOT NULL,
	CONSTRAINT flgviabilita_ista_pk PRIMARY KEY (id_ista, prog_viabilita)
);
ALTER TABLE foliage2.flgviabilita_ista_tab ADD CONSTRAINT flgviabilita_ista_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;
ALTER TABLE foliage2.flgviabilita_ista_tab ADD CONSTRAINT flgviabilita_ista_fk_tipo FOREIGN KEY (cod_tipo_viabilita) REFERENCES foliage2.flgtipo_viabilita_tab(cod_tipo_viabilita);



-- registro degli altri strati informativi di un'istanza
CREATE TABLE foliage2.flgstrati_ista_tab (
	id_ista int4 NOT NULL,
	prog_strato int4 NOT NULL,
	prog_uog int4 NULL,
	nome_strato varchar NOT NULL,
	is_area_saggio_tradizionale bool NOT NULL,
	is_area_dimostrativa bool NOT NULL,
	is_area_saggio_relascopica bool NOT NULL,
	is_imposto bool NOT NULL,
	superficie_strato numeric NULL,
	percentuale_rappresentativita numeric NULL,
	shape public.geometry NOT NULL,
	CONSTRAINT flgstrati_ista_pk PRIMARY KEY (id_ista, prog_strato)
);
ALTER TABLE foliage2.flgstrati_ista_tab ADD CONSTRAINT flgstrati_ista_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;
ALTER TABLE foliage2.flgstrati_ista_tab ADD CONSTRAINT flgstrati_ista_fk_uo FOREIGN KEY (id_ista,prog_uog) REFERENCES foliage2.flgunita_omogenee_tab(id_ista,prog_uog) ON DELETE CASCADE;





-- registro delle speci forestali indicate in un'istanza sottosoglia di tipo taglio boschivo
CREATE TABLE foliage2.flgspeci_ista_tab (
	id_ista int4 NOT NULL,
	prog int4 NOT NULL,
	id_specie int4 NOT NULL,
	percentuale_intervento float8 NOT NULL,
	CONSTRAINT flgspeci_ista_pk PRIMARY KEY (id_ista, prog),
	CONSTRAINT flgspeci_ista_tab_percentuale_intervento_check CHECK (((percentuale_intervento >= (0)::double precision) AND (percentuale_intervento <= (100)::double precision))),
	CONSTRAINT flgspeci_ista_unq_spec UNIQUE (id_specie, id_ista),
	CONSTRAINT flgspeci_ista_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista),
	CONSTRAINT flgspeci_ista_fk_specie FOREIGN KEY (id_specie) REFERENCES foliage2.flgspecie_tab(id_specie)
);

-- assortimento delle varie speci di un'istanza sotto soglia
CREATE TABLE foliage2.flgass_speci_ista_tab (
	id_ista int4 NOT NULL,
	id_specie int4 NOT NULL,
	id_assortimento int4 NOT NULL,
	is_autoconsumo bool NOT NULL,
	percentuale_ass float8 NOT NULL,
	CONSTRAINT flgass_speci_ista_pk PRIMARY KEY (id_ista, id_specie, id_assortimento, is_autoconsumo),
	CONSTRAINT flgass_speci_ista_tab_percentuale_ass_check CHECK (((percentuale_ass >= (0)::double precision) AND (percentuale_ass <= (100)::double precision)))
);
ALTER TABLE foliage2.flgass_speci_ista_tab ADD CONSTRAINT flgass_speci_ista_fk_assort FOREIGN KEY (id_assortimento) REFERENCES foliage2.flgassortimento_tab(id_assortimento);
ALTER TABLE foliage2.flgass_speci_ista_tab ADD CONSTRAINT flgass_speci_ista_fk_speci_ista FOREIGN KEY (id_ista,id_specie) REFERENCES foliage2.flgspeci_ista_tab(id_ista, id_specie);


-- registro delle speci forestali indicate in un'unitÃ  omogenea
CREATE TABLE foliage2.flgspeci_uog_tab (
	id_ista int4 NOT NULL,
	prog_uog int4 NOT NULL,
	prog_specie_uog int4 NOT NULL,
	id_specie int4 NOT NULL,
	percentuale_intervento float8 NOT NULL,
	CONSTRAINT flgspeci_uog_pk PRIMARY KEY (id_ista, prog_uog, prog_specie_uog),
	CONSTRAINT flgspeci_uog_tab_percentuale_intervento_check CHECK (((percentuale_intervento >= (0)::double precision) AND (percentuale_intervento <= (100)::double precision))),
	CONSTRAINT flgspeci_uog_unq_spec UNIQUE (id_specie, id_ista, prog_uog)
);
ALTER TABLE foliage2.flgspeci_uog_tab ADD CONSTRAINT flgspeci_uog_fk_specie FOREIGN KEY (id_specie) REFERENCES foliage2.flgspecie_tab(id_specie);
ALTER TABLE foliage2.flgspeci_uog_tab ADD CONSTRAINT flgspeci_uog_fk_uog FOREIGN KEY (id_ista,prog_uog) REFERENCES foliage2.flgunita_omogenee_tab(id_ista,prog_uog) ON DELETE CASCADE;

-- assortimento delle varie speci di un'unitÃ  omogenea
CREATE TABLE foliage2.flgass_speci_uog_tab (
	id_ista int4 NOT NULL,
	prog_uog int4 NOT NULL,
	id_specie int4 NOT NULL,
	id_assortimento int4 NOT NULL,
	is_autoconsumo bool NOT NULL,
	percentuale_ass float8 NOT NULL,
	CONSTRAINT flgass_speci_uog_pk PRIMARY KEY (id_ista, prog_uog, id_specie, id_assortimento, is_autoconsumo),
	CONSTRAINT flgass_speci_uog_tab_percentuale_ass_check CHECK (((percentuale_ass >= (0)::double precision) AND (percentuale_ass <= (100)::double precision)))
);
ALTER TABLE foliage2.flgass_speci_uog_tab ADD CONSTRAINT flgass_speci_uog_fk_assort FOREIGN KEY (id_assortimento) REFERENCES foliage2.flgassortimento_tab(id_assortimento);
ALTER TABLE foliage2.flgass_speci_uog_tab ADD CONSTRAINT flgass_speci_uog_fk_speci_uog FOREIGN KEY (id_ista,prog_uog,id_specie) REFERENCES foliage2.flgspeci_uog_tab(id_ista,prog_uog,id_specie) ON DELETE CASCADE;




-- dati sulle tavole di cubatura di un'istanza
CREATE TABLE foliage2.flgunita_omogenee_cubatura_tab (
	id_ista int4 NOT NULL,
	prog_uog int4 NOT NULL,
	cod_metodo_cubatura varchar NULL,
	desc_metodo_cubatura varchar NULL,
	CONSTRAINT flgunita_omogenee_cubatura_pk PRIMARY KEY (id_ista, prog_uog)
);
ALTER TABLE foliage2.flgunita_omogenee_cubatura_tab ADD CONSTRAINT flgunita_omogenee_cubatura_fk_uo FOREIGN KEY (id_ista,prog_uog) REFERENCES foliage2.flgunita_omogenee_tab(id_ista,prog_uog) ON DELETE CASCADE;




-- registro dei valori delle tavole di cubatura di un'istanza
CREATE TABLE foliage2.flgunita_omogenee_val_cubatura_tab (
	id_ista int4 NOT NULL,
	prog_uog int4 NOT NULL,
	cat_cubatura varchar NOT NULL,
	cod_gruppo_cubatura varchar NOT NULL,
	valore_num_ha numeric NULL,
	valore_mq_ha numeric NULL,
	CONSTRAINT flgunita_omogenee_val_cubatura_pk PRIMARY KEY (id_ista, prog_uog, cat_cubatura, cod_gruppo_cubatura)
);
ALTER TABLE foliage2.flgunita_omogenee_val_cubatura_tab ADD CONSTRAINT flgunita_omogenee_val_cubatura_fk_uo_cub FOREIGN KEY (id_ista,prog_uog) REFERENCES foliage2.flgunita_omogenee_cubatura_tab(id_ista,prog_uog) ON DELETE CASCADE;


-- file della sezione allegati di un'istanza
CREATE TABLE foliage2.flgallegati_ista_tab (
	id_allegato_ista int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_ista int4 NOT NULL,
	cod_tipo_allegato varchar NOT NULL,
	desc_altro_allegato varchar NULL,
	id_file_allegato int4 NOT NULL,
	CONSTRAINT flgallegati_ista_pk PRIMARY KEY (id_allegato_ista)
);
ALTER TABLE foliage2.flgallegati_ista_tab ADD CONSTRAINT flgallegati_ista_fk_file FOREIGN KEY (id_file_allegato) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgallegati_ista_tab ADD CONSTRAINT flgallegati_ista_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;




-- dettagli aggiuntivi per le istanze di tipo attuazione piani di gestione forestale
CREATE TABLE foliage2.flgattuazione_piani_ista_tab (
	id_ista int4 NOT NULL,
	nome_pgf varchar NOT NULL,
	nome_compresa_forestale varchar NOT NULL,
	oggetto varchar NOT NULL,
	CONSTRAINT flgattuazione_piani_ista_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgattuazione_piani_ista_tab ADD CONSTRAINT flgattuazione_piani_ista_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;


-- dati delle istanze sottoglia di tipo taglio boschivo
CREATE TABLE foliage2.flgista_taglio_boschivo_tab (
	id_ista int4 NOT NULL,
	superficie_intervento numeric NOT NULL,
	desc_gove varchar NULL,
	id_sspr int4 NOT NULL,
	eta_media int4 NULL,
	tipo_soprasuolo varchar NULL,
	CONSTRAINT flgista_taglio_boschivo_pk PRIMARY KEY (id_ista),
	CONSTRAINT flgista_taglio_boschivo_tab_eta_media_check CHECK ((eta_media >= 0)),
	CONSTRAINT flgista_taglio_boschivo_tab_superficie_intervento_check CHECK ((superficie_intervento >= (0)::numeric))
);
ALTER TABLE foliage2.flgista_taglio_boschivo_tab ADD CONSTRAINT flgista_taglio_boschivo_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);

-- forme di trattamento indicato per le istanze sottoglia di tipo taglio boschivo
CREATE TABLE foliage2.flgista_taglio_boschivo_trattamento_tab (
	id_ista int4 NOT NULL,
	id_gove int4 NOT NULL,
	id_forma_trattamento_prec int4 NOT NULL,
	id_forma_trattamento int4 NOT NULL,
	CONSTRAINT flgista_taglio_boschivo_trattamento_pk PRIMARY KEY (id_ista, id_gove)
);
ALTER TABLE foliage2.flgista_taglio_boschivo_trattamento_tab ADD CONSTRAINT flgista_taglio_boschivo_trattamento_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_taglio_boschivo_tab(id_ista) ON DELETE CASCADE;


--- dati delle istanze sotto soglia di tipo intervento a comunicazione
CREATE TABLE foliage2.flgista_intervento_comunicazione_tab (
	id_ista int4 NOT NULL,
	id_tipo_intervento int4 NOT NULL,
	valore_dichiatato float8 NOT NULL,
	desc_intervento varchar NULL,
	CONSTRAINT flgista_intervento_comunicazione_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgista_intervento_comunicazione_tab ADD CONSTRAINT flgista_intervento_comunicazione_fk_inte FOREIGN KEY (id_tipo_intervento) REFERENCES foliage2.flgtipo_intervento_tab(id_tipo_intervento);
ALTER TABLE foliage2.flgista_intervento_comunicazione_tab ADD CONSTRAINT flgista_intervento_comunicazione_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);


-- dati sul supporto finanziario di un'istanza
CREATE TABLE foliage2.flgsupporto_finanziario_ista_tab (
	id_ista int4 NOT NULL,
	cod_tipo_finanziamento int4 NOT NULL,
	denom_fondo varchar NULL,
	CONSTRAINT flgsupporto_finanziario_ista_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgsupporto_finanziario_ista_tab ADD CONSTRAINT flgsupporto_finanziario_ista_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;
ALTER TABLE foliage2.flgsupporto_finanziario_ista_tab ADD CONSTRAINT flgsupporto_finanziario_ista_fk_tipo FOREIGN KEY (cod_tipo_finanziamento) REFERENCES foliage2.flgsupporto_finanziario_tab(cod_tipo_finanziamento);


-- storico degli utenti registrati come gestori di un'istanza
CREATE TABLE foliage2.flgista_storico_gestori_tab (
	id_ista int4 NOT NULL,
	id_utente_gestore_precedente int4 NULL,
	id_stato_registrato int4 NOT NULL,
	data_cambio_gestore timestamp NOT NULL,
	id_utente_cambio int4 NOT NULL,
	CONSTRAINT flgista_storico_gestori_pk PRIMARY KEY (id_ista, data_cambio_gestore)
);
ALTER TABLE foliage2.flgista_storico_gestori_tab ADD CONSTRAINT flgista_storico_gestori_fk_cambio FOREIGN KEY (id_utente_cambio) REFERENCES foliage2.flguten_tab(id_uten);
ALTER TABLE foliage2.flgista_storico_gestori_tab ADD CONSTRAINT flgista_storico_gestori_fk_gest FOREIGN KEY (id_utente_gestore_precedente) REFERENCES foliage2.flguten_tab(id_uten);
ALTER TABLE foliage2.flgista_storico_gestori_tab ADD CONSTRAINT flgista_storico_gestori_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);
ALTER TABLE foliage2.flgista_storico_gestori_tab ADD CONSTRAINT flgista_storico_gestori_fk_stato FOREIGN KEY (id_stato_registrato) REFERENCES foliage2.flgstato_istanza_tab(id_stato);



-- registro delle istanze presentate
CREATE TABLE foliage2.flgista_invio_tab (
	id_ista int4 NOT NULL,
	data_invio timestamp NOT NULL,
	id_file_ricevute int4 NOT NULL,
	id_file_diritti_istruttoria int4 NOT NULL,
	id_file_modulo_istanza int4 NULL,
	CONSTRAINT flgista_invio_pk PRIMARY KEY (id_ista)
);
CREATE INDEX flgista_invio_idx_file ON foliage2.flgista_invio_tab USING btree (id_file_ricevute);

ALTER TABLE foliage2.flgista_invio_tab ADD CONSTRAINT flgista_invio_fk_file_diritti FOREIGN KEY (id_file_diritti_istruttoria) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgista_invio_tab ADD CONSTRAINT flgista_invio_fk_file_modulo FOREIGN KEY (id_file_modulo_istanza) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgista_invio_tab ADD CONSTRAINT flgista_invio_fk_file_ricevute FOREIGN KEY (id_file_ricevute) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgista_invio_tab ADD CONSTRAINT flgista_invio_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;

-- registro delle assegnazioni degli istruttori alle istanze
CREATE TABLE foliage2.flgassegnazione_istanza_tab (
	id_ista int4 NOT NULL,
	id_utente_istruttore int4 NOT NULL,
	id_utente_assegnazione int4 NOT NULL,
	data_assegnazione timestamp NOT NULL,
	CONSTRAINT flgassegnazione_istanza_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgassegnazione_istanza_tab ADD CONSTRAINT flgassegnazione_istanza_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);

-- dati per la produzione del documento di istruttoria di un'istanza
CREATE TABLE foliage2.flgista_dati_istruttoria_tab (
	id_ista int4 NOT NULL,
	oggetto varchar NOT NULL,
	ulteriori_destinatari varchar NULL,
	testo varchar NULL,
	CONSTRAINT flgista_dati_istruttoria_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgista_dati_istruttoria_tab ADD CONSTRAINT flgista_dati_istruttoria_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);


--- file richiesti dall'istruttore al gestore di un'istanza 
CREATE TABLE foliage2.flgrichieste_istuttoria_istanza_tab (
	id_richieste_istuttoria_istanza int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_ista int4 NOT NULL,
	id_utente_istruttore int4 NOT NULL,
	categoria varchar NULL,
	tipo_documento varchar NULL,
	note_istruttore varchar NULL,
	data_richiesta timestamp NOT NULL,
	CONSTRAINT flgrichieste_istuttoria_istanza_pk PRIMARY KEY (id_richieste_istuttoria_istanza)
);
CREATE INDEX flgrichieste_istuttoria_istanza_idx_ista ON foliage2.flgrichieste_istuttoria_istanza_tab USING btree (id_ista);

ALTER TABLE foliage2.flgrichieste_istuttoria_istanza_tab ADD CONSTRAINT flgrichieste_istuttoria_istanza_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);
ALTER TABLE foliage2.flgrichieste_istuttoria_istanza_tab ADD CONSTRAINT flgrichieste_istuttoria_istanza_fk_istr FOREIGN KEY (id_utente_istruttore) REFERENCES foliage2.flguten_tab(id_uten);


--- caricati dal gestore di un'istanza durante l'istruttoria
CREATE TABLE foliage2.flgdocumenti_istuttoria_istanza_tab (
	id_richieste_istuttoria_istanza int4 NOT NULL,
	id_utente_gestore int4 NOT NULL,
	id_file int4 NOT NULL,
	note_gestore varchar NULL,
	data_consegna timestamp NULL,
	CONSTRAINT flgdocumenti_istuttoria_istanza_pk PRIMARY KEY (id_richieste_istuttoria_istanza)
);

ALTER TABLE foliage2.flgdocumenti_istuttoria_istanza_tab ADD CONSTRAINT flgdocumenti_istuttoria_istanza_fk_file FOREIGN KEY (id_file) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgdocumenti_istuttoria_istanza_tab ADD CONSTRAINT flgdocumenti_istuttoria_istanza_fk_gest FOREIGN KEY (id_utente_gestore) REFERENCES foliage2.flguten_tab(id_uten);
ALTER TABLE foliage2.flgdocumenti_istuttoria_istanza_tab ADD CONSTRAINT flgdocumenti_istuttoria_istanza_fk_ista FOREIGN KEY (id_richieste_istuttoria_istanza) REFERENCES foliage2.flgrichieste_istuttoria_istanza_tab(id_richieste_istuttoria_istanza) ON DELETE CASCADE;

CREATE INDEX flgdocumenti_istuttoria_istanza_idx_file ON foliage2.flgdocumenti_istuttoria_istanza_tab USING btree (id_file);
CREATE INDEX flgdocumenti_istuttoria_istanza_idx_ista ON foliage2.flgdocumenti_istuttoria_istanza_tab USING btree (id_richieste_istuttoria_istanza);


-- registro con i risultati sulla valutazione delle istanze
CREATE TABLE foliage2.flgvalutazione_istanza_tab (
	id_ista int4 NOT NULL,
	esito_valutazione bool NOT NULL,
	note_valutazione varchar NOT NULL,
	data_valutazione timestamp NOT NULL,
	id_utente_istruttore int4 NOT NULL,
	data_fine_validita date NULL,
	id_file_modulo_istruttoria int4 NULL,
	CONSTRAINT flgvalutazione_istanza_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgvalutazione_istanza_tab ADD CONSTRAINT flgvalutazione_istanza_fk_file_modulo FOREIGN KEY (id_file_modulo_istruttoria) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgvalutazione_istanza_tab ADD CONSTRAINT flgvalutazione_istanza_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgassegnazione_istanza_tab(id_ista);
ALTER TABLE foliage2.flgvalutazione_istanza_tab ADD CONSTRAINT flgvalutazione_istanza_fk_istr FOREIGN KEY (id_utente_istruttore) REFERENCES foliage2.flguten_tab(id_uten);




-- registro delle richieste di proroga
CREATE TABLE foliage2.flgista_proroga_tab (
	id_ista int4 NOT NULL,
	mesi_durata int4 NOT NULL,
	id_file_pagamento int4 NOT NULL,
	motivazione varchar NULL,
	data_proroga timestamp NULL,
	utente_proroga int4 NOT NULL,
	CONSTRAINT flgista_proroga_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgista_proroga_tab ADD CONSTRAINT flgista_proroga_fk_file FOREIGN KEY (id_file_pagamento) REFERENCES foliage2.flgbase64_formio_file_master_tab(id_file);
ALTER TABLE foliage2.flgista_proroga_tab ADD CONSTRAINT flgista_proroga_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);
ALTER TABLE foliage2.flgista_proroga_tab ADD CONSTRAINT flgista_proroga_fk_ute FOREIGN KEY (utente_proroga) REFERENCES foliage2.flguten_tab(id_uten);


-- registro delle date di inizio lavori comunicate dagli utenti
CREATE TABLE foliage2.flgdate_inizio_lavori_istanza_tab (
	id_ista int4 NOT NULL,
	data_inizio_lavori date NOT NULL,
	data_comunicazione_inizio_lavori timestamp NOT NULL,
	id_utente_comunicazione_inizio_lavori int4 NOT NULL,
	CONSTRAINT flgdate_inizio_lavori_istanza_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgdate_inizio_lavori_istanza_tab ADD CONSTRAINT flgdate_inizio_lavori_istanza_fk_ista FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista);

-- registro delle date di fine lavori comunicate dagli utenti
CREATE TABLE foliage2.flgdate_fine_lavori_istanza_tab (
	id_ista int4 NOT NULL,
	data_fine_lavori date NOT NULL,
	data_comunicazione_fine_lavori timestamp NOT NULL,
	id_utente_comunicazione_fine_lavori int4 NOT NULL,
	CONSTRAINT flgdate_fine_lavori_istanza_pk PRIMARY KEY (id_ista)
);
ALTER TABLE foliage2.flgdate_fine_lavori_istanza_tab ADD CONSTRAINT flgdate_fine_lavori_istanza_fk_inizio FOREIGN KEY (id_ista) REFERENCES foliage2.flgdate_inizio_lavori_istanza_tab(id_ista);






-- registro dei rilevamenti in campo
CREATE TABLE foliage2.flgrile_tab (
	id_rile numeric(20) NOT NULL,
	tipo_rilevamento int2 NOT NULL,
	nome varchar NULL,
	note varchar NULL,
	id_clay int4 NOT NULL,
	shape public.geometry NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NULL,
	data_fine_vali date NULL,
	id_ista int4 NOT NULL,
	id_utente int4 NOT NULL,
	tipo_auth varchar NOT NULL,
	tipo_ambito varchar NOT NULL,
	CONSTRAINT flgrile_tab_pkey PRIMARY KEY (id_rile)
);

ALTER TABLE foliage2.flgrile_tab ADD CONSTRAINT flgrile_clay_tab_fk1 FOREIGN KEY (id_clay) REFERENCES foliage2.flgclay_tab(id_clay);
ALTER TABLE foliage2.flgrile_tab ADD CONSTRAINT flgrile_fk_profilo FOREIGN KEY (tipo_auth,tipo_ambito) REFERENCES foliage2.flgprof_tab(tipo_auth,tipo_ambito);
ALTER TABLE foliage2.flgrile_tab ADD CONSTRAINT flgrile_fk_utente FOREIGN KEY (id_utente) REFERENCES foliage2.flguten_tab(id_uten) ON DELETE CASCADE;
ALTER TABLE foliage2.flgrile_tab ADD CONSTRAINT flgrile_tab_flgista_tab_fk FOREIGN KEY (id_ista) REFERENCES foliage2.flgista_tab(id_ista) ON DELETE CASCADE;


-- immagini associate ai rilevamenti in campo
CREATE TABLE foliage2.flgfoto_tab (
	id_foto int4 NOT NULL,
	nome varchar NULL,
	file bytea NULL,
	id_rile numeric(20) NULL,
	flag_valido int2 NULL,
	user_ins varchar NULL,
	data_ins date NULL,
	user_upd varchar NULL,
	data_upd date NULL,
	data_ini_vali date NULL,
	data_fine_vali date NULL,
	CONSTRAINT flgfoto_tab_pkey PRIMARY KEY (id_foto)
);
ALTER TABLE foliage2.flgfoto_tab ADD CONSTRAINT flgfoto_rile_tab_fk1 FOREIGN KEY (id_rile) REFERENCES foliage2.flgrile_tab(id_rile) ON DELETE CASCADE;

--------------------- 2 - DATI
-- 3 - Dati per schedulazione e reportistica
---------------

-- registro delle richieste di esecuzione per le elaborazioni batch manuali
create table foliage2.flgbatch_ondemand_tab (
	id_batch_ondemand int not null GENERATED ALWAYS AS identity,
	id_batch int not null,
	data_inserimento timestamp without time zone not null,
	data_rife timestamp without time zone not null,
	parametri json,
	id_utente int not null,
	data_avvio timestamp without time zone,
	constraint flgbatch_ondemand_pk
		primary key (id_batch_ondemand),
	constraint flgbatch_ondemand_unq
		unique (id_batch, data_rife),
	constraint flgbatch_ondemand_fk_batch
		foreign key (id_batch)
		references foliage2.flgconf_batch_tab,
	constraint flgbatch_ondemand_fk_utente
		foreign key (id_utente)
		references foliage2.flguten_tab
);


-- registro delle elaborazioni batch attualmente in esecuzione nel sistema
CREATE TABLE foliage2.flgpending_batch_tab (
	id_pend_batch int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_batch int4 NOT NULL,
	data_batch timestamp NOT NULL,
	data_rife timestamp NOT NULL,
	data_submission timestamp NOT NULL,
	CONSTRAINT flgpending_batch_pk PRIMARY KEY (id_pend_batch),
	CONSTRAINT flgpending_batch_unq UNIQUE (id_batch, data_rife),
	CONSTRAINT flgpending_batch_fk_batch FOREIGN KEY (id_batch) REFERENCES foliage2.flgconf_batch_tab(id_batch)
);

-- registro delle elaborazioni batch eseguite nel sistema
CREATE TABLE foliage2.flgexecuted_batch_tab (
	id_exec_batch int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_batch int4 NOT NULL,
	data_batch timestamp NOT NULL,
	data_rife timestamp NOT NULL,
	data_submission timestamp NOT NULL,
	data_avvio timestamp NOT NULL,
	data_termine timestamp NOT NULL,
	num_record_elaborati int4 NOT NULL,
	CONSTRAINT flgexecuted_batch_pk PRIMARY KEY (id_exec_batch),
	CONSTRAINT flgexecuted_batch_unq UNIQUE (id_batch, data_rife),
	CONSTRAINT flgexecuted_batch_fk_batch FOREIGN KEY (id_batch) REFERENCES foliage2.flgconf_batch_tab(id_batch)
);

-- errori rilevati nell'esecuzione dei batch schedulati
CREATE TABLE foliage2.flgerror_batch_tab (
	id_err_batch int4 NOT NULL GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	id_batch int4 NOT NULL,
	data_batch timestamp NOT NULL,
	data_rife timestamp NOT NULL,
	data_submission timestamp NOT NULL,
	data_avvio timestamp NOT NULL,
	data_termine timestamp NOT NULL,
	dett_errore varchar NOT NULL,
	CONSTRAINT flgerror_batch_pk PRIMARY KEY (id_err_batch),
	CONSTRAINT flgerror_batch_fk_batch FOREIGN KEY (id_batch) REFERENCES foliage2.flgconf_batch_tab(id_batch)
);



-- risultati dell'eleborazione che predispone i report delle istanze approvate automaticamente
CREATE TABLE foliage2.flgreport_autoaccettazione_istanze_tab (
	data_rife timestamp NOT NULL,
	id_ista int4 NOT NULL,
	id_ente_terr int4 NOT NULL,
	CONSTRAINT flgreport_autoaccettazione_istanze_pk PRIMARY KEY (id_ista)
);
CREATE INDEX flgreport_autoaccettazione_istanze_idx_data ON foliage2.flgreport_autoaccettazione_istanze_tab USING btree (data_rife);



-- risultati dell'eleborazione che predispone i report P1 e P2
CREATE TABLE foliage2.flgreport_p1_2_tab (
	data_rife date NOT NULL,
	durata interval NOT NULL,
	id varchar NOT NULL,
	prog_uog int4 NOT NULL,
	tipologia varchar NOT NULL,
	"data" date NOT NULL,
	id_ente_terr int4 NOT NULL,
	stato varchar NOT NULL,
	id_prop varchar NOT NULL,
	id_prof varchar NOT NULL,
	tratt_uo varchar NOT NULL,
	supe_uo numeric NOT NULL,
	vol_uo numeric NOT NULL,
	shape public.geometry NOT NULL,
	CONSTRAINT flgreport_p1m_unq UNIQUE (data_rife, durata, id, prog_uog, tratt_uo)
);


-- risultati dell'eleborazione che predispone i report P3 nat1 e P3 nat2
CREATE TABLE foliage2.flgreport_p3_tab (
	data_rife date NOT NULL,
	codice varchar NOT NULL,
	id_ista int4 NOT NULL,
	esito_valutazione bool NOT NULL,
	shape_vinc public.geometry NOT NULL,
	superficie_vinc numeric NOT NULL,
	superficie_pf numeric NOT NULL,
	superficie_utile numeric NOT NULL,
	massa numeric NOT NULL,
	perc_dist numeric NOT NULL,
	CONSTRAINT flgreport_p3_unq UNIQUE (data_rife, codice, id_ista)
);


-- risultati dell'eleborazione che predispone il report P4
CREATE TABLE foliage2.flgreport_p4_tab (
	data_rife timestamp NOT NULL,
	cod_indicatore varchar NOT NULL,
	numero_istanze int4 NOT NULL,
	numero_istanze_autorizzate int4 NOT NULL,
	numero_istanze_non_autorizzate int4 NOT NULL,
	supe_istanze_autorizzate numeric NOT NULL,
	supe_privata numeric NOT NULL,
	supe_pubblica numeric NOT NULL,
	supe_uso_civico numeric NOT NULL,
	supe_altro numeric NOT NULL,
	supe_ceduo numeric NOT NULL,
	supe_fustaia numeric NOT NULL,
	supe_misto numeric NOT NULL,
	vol_totale numeric NOT NULL,
	vol_ardere_conifere numeric NOT NULL,
	vol_ardere_nonconifere numeric NOT NULL,
	vol_legname_conifere numeric NOT NULL,
	vol_legname_nonconifere numeric NOT NULL,
	vol_impiallaccitura_conifere numeric NOT NULL,
	vol_impiallaccitura_nonconifere numeric NOT NULL,
	vol_paste_conifere numeric NOT NULL,
	vol_paste_nonconifere numeric NOT NULL,
	vol_altro_conifere numeric NOT NULL,
	vol_altro_nonconifere numeric NOT NULL,
	supe_cat_1 numeric NOT NULL,
	supe_cat_2 numeric NOT NULL,
	supe_cat_3 numeric NOT NULL,
	supe_cat_4 numeric NOT NULL,
	supe_cat_5 numeric NOT NULL,
	supe_cat_6 numeric NOT NULL,
	supe_cat_7 numeric NOT NULL,
	supe_cat_8 numeric NOT NULL,
	supe_cat_9 numeric NOT NULL,
	supe_cat_10 numeric NOT NULL,
	supe_cat_11 numeric NOT NULL,
	supe_cat_12 numeric NOT NULL,
	supe_cat_13 numeric NOT NULL,
	supe_cat_14 numeric NOT NULL,
	supe_cat_15 numeric NOT NULL,
	supe_cat_16 numeric NOT NULL,
	supe_cat_17 numeric NOT NULL,
	supe_cat_18 numeric NOT NULL,
	supe_cat_19 numeric NOT NULL,
	supe_cat_20 numeric NOT NULL,
	supe_cat_21 numeric NOT NULL,
	supe_cat_22 numeric NOT NULL,
	supe_cat_23 numeric NOT NULL,
	CONSTRAINT flgreport_p4_ck_cod_indicatore CHECK (((cod_indicatore)::text = ANY ((ARRAY['A'::character varying, 'B'::character varying])::text[]))),
	CONSTRAINT flgreport_p4_pk PRIMARY KEY (data_rife, cod_indicatore)
);








